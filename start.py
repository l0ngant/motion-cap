# Block of code for automatic path setup: it makes possible
# to execute the script from any location as long as the
# input file(s) are in the same folder as the script.
import os
abpath = os.path.abspath(__file__)
script_path = os.path.dirname(abpath)
os.chdir(script_path)

# Imports the dataframe generated by the webcam script (motion_cap):
from motion_cap import df
# Importing the module for the hover function:
from bokeh.models import HoverTool, ColumnDataSource
# Importing the essentials methods from bokeh.plotting:
from bokeh.plotting import figure, show, output_file

# Formatting the dataframe in date format:
df['Start_string'] = df['Motion start'].dt.strftime('%D %H:%M:%S')
df['End_string'] = df['Motion end'].dt.strftime('%D %H:%M:%S')

# Converting the dataframe df into a format readable by bokeh:
cds = ColumnDataSource(df)

# Setting the parameters for the graph:
f = figure(x_axis_type='datetime', sizing_mode='scale_both', height=100, width=500, title='Motion Graph')

# Removing labels and tick lines from the graph:
f.yaxis.minor_tick_line_color=None
f.yaxis.major_tick_line_color=None
f.yaxis.major_label_text_font_size = '0pt'
f.xaxis.major_label_text_font_size = '0pt'

# Setting up and adding the hovering function:
hovering = HoverTool(tooltips=[('Start', '@Start_string'), ('End', '@End_string')])
f.add_tools(hovering)

# Plotting a square to have a bar-like graph:
q = f.quad(left='Motion start', right='Motion end', top=1, bottom=0, color='green', source=cds)

# Creating the output file:
output_file('Graph.html')

# Showing the graph with the same data as the output:
show(f)